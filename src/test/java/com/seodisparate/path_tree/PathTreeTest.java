/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.seodisparate.path_tree;

import org.junit.Test;
import static org.junit.Assert.*;

public class PathTreeTest {
    @Test public void test_print_list() {
        PathTree pathTree = new PathTree();

        System.out.println("Printing empty tree...");
        pathTree.printList();

        assertTrue(pathTree.put("/derp/doodle/doop"));

        System.out.println("Printing tree after put()...");
        pathTree.printList();

        assertTrue(pathTree.remove("/derp/doodle"));

        System.out.println("Printing tree after remove()...");
        pathTree.printList();
    }

    @Test public void test_put_remove() {
        PathTree pathTree = new PathTree();

        assertTrue(pathTree.put("/apple/banana/strawberry"));
        assertTrue(pathTree.put("/apple/milkshake/tart"));
        assertTrue(pathTree.put("/mango/blueberry/pizza"));

        assertFalse(pathTree.remove("apple/milkshake"));

        assertTrue(pathTree.remove("/apple"));
        assertTrue(pathTree.remove("/mango/blueberry"));

        pathTree.printList();
    }

    @Test public void test_partial_has() {
        PathTree pathTree = new PathTree();

        assertTrue(pathTree.put("/derp/a/doodle/doo"));

        assertTrue(pathTree.has("/"));
        assertTrue(pathTree.has("/derp"));
        assertTrue(pathTree.has("/derp/a"));
        assertTrue(pathTree.has("/derp/a/doodle"));
        assertTrue(pathTree.has("/derp/a/doodle/doo"));
    }

    @Test public void test_stored_data() {
        PathTree<Integer> pathTree = new PathTree<>();

        assertTrue(pathTree.put("/one", 1));
        assertTrue(pathTree.put("/two", 2));
        assertTrue(pathTree.put("/three", 3));
        assertTrue(pathTree.put("/four", 4));

        assertEquals(pathTree.get("/one").getData(), Integer.valueOf(1));
        assertEquals(pathTree.get("/two").getData(), Integer.valueOf(2));
        assertEquals(pathTree.get("/three").getData(), Integer.valueOf(3));
        assertEquals(pathTree.get("/four").getData(), Integer.valueOf(4));

        pathTree.get("/one").setData(100);
        assertEquals(pathTree.get("/one").getData(), Integer.valueOf(100));
        assertEquals(pathTree.get("/two").getData(), Integer.valueOf(2));
        assertEquals(pathTree.get("/three").getData(), Integer.valueOf(3));
        assertEquals(pathTree.get("/four").getData(), Integer.valueOf(4));

        assertNotNull(pathTree.get("/"));
    }
}
